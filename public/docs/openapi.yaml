openapi: 3.0.3
info:
    title: Laravel
    description: ''
    version: 1.0.0
servers:
    -
        url: 'http://restful-example.web'
paths:
    /api/admins:
        get:
            summary: 'Resource Collection.'
            description: 'Display a collection of the admin resources in paginated document format.'
            parameters:
                -
                    in: query
                    name: 'fields[admins]'
                    description: "*string* - \nComma-separated field/attribute names of the admin resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the admin resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'page[size]'
                    description: "*integer* - \nDescribe how many records to display in a collection."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*integer* - \nDescribe how many records to display in a collection."
                        example: null
                -
                    in: query
                    name: 'page[number]'
                    description: "*integer* - \nDescribe the number of current page to display."
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: "*integer* - \nDescribe the number of current page to display."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `posts`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `posts`."
                        example: null
                -
                    in: query
                    name: sort
                    description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'filter[`filterName`]'
                    description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, name: 'Ut quasi molestiae odit voluptas fuga est magnam.', email: uriah.west@example.org, role: superadmin, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 2, name: 'Et ea qui a cupiditate.', email: kiley15@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 3, name: 'Qui mollitia sit enim molestiae.', email: judson.wyman@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 4, name: 'Sunt enim vitae aut consequatur vel enim.', email: marks.caesar@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 5, name: 'In et quia qui voluptatem id quidem quo.', email: deanna.borer@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 6, name: 'Qui ipsam laudantium voluptatibus iste ullam omnis.', email: malcolm10@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 7, name: 'Pariatur quae architecto quam dolorem.', email: lueilwitz.dorcas@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 8, name: 'Tempora porro qui repudiandae sed.', email: kuhlman.keara@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 9, name: 'Beatae nemo praesentium sunt blanditiis et rerum in.', email: magnolia.kuhic@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 10, name: 'Tempora voluptate eum tenetur nesciunt recusandae.', email: mollie92@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 11, name: 'Quo quia earum voluptatibus delectus sint aut eos nam.', email: shanelle80@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 12, name: 'Dignissimos tempore inventore perspiciatis autem voluptate provident magni.', email: rdach@example.org, role: superadmin, deleted_at: null, created_at: '2021-03-01T07:01:04.000000Z', updated_at: '2021-03-01T07:01:04.000000Z' }, { id: 13, name: 'Voluptatem et aliquid ab necessitatibus dolores perspiciatis voluptas.', email: mante.emelie@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 14, name: 'A minus dolores dolores.', email: sfarrell@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 15, name: 'Qui voluptas et veniam soluta ipsam dolor facere nihil.', email: lew95@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 16, name: 'Quia eum illum maxime.', email: lmueller@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 17, name: 'Delectus voluptatem cupiditate veritatis aut doloribus accusantium nihil.', email: marielle84@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 18, name: 'Est molestiae ut officia omnis reiciendis voluptatibus.', email: paul62@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 19, name: 'Et est ut veritatis qui.', email: yhermann@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 20, name: 'Ipsam sint voluptatem error similique.', email: cormier.jacquelyn@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 21, name: 'Quia magni et vel et quas aut.', email: rmurazik@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 22, name: 'Iusto harum quia autem.', email: sheldon.bauch@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 25, name: Faizal, email: faizal@suitmedia.com, role: editor, deleted_at: null, created_at: '2021-03-01T08:00:21.000000Z', updated_at: '2021-03-01T08:00:21.000000Z' }]
                                    links: { first: 'http://localhost/api/admins?page%5Bnumber%5D=1', last: 'http://localhost/api/admins?page%5Bnumber%5D=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/admins?page%5Bnumber%5D=1', label: '1', active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/admins', per_page: 30, to: 23, total: 23 }
                                properties:
                                    data: { type: array, example: [{ id: 1, name: 'Ut quasi molestiae odit voluptas fuga est magnam.', email: uriah.west@example.org, role: superadmin, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 2, name: 'Et ea qui a cupiditate.', email: kiley15@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 3, name: 'Qui mollitia sit enim molestiae.', email: judson.wyman@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 4, name: 'Sunt enim vitae aut consequatur vel enim.', email: marks.caesar@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 5, name: 'In et quia qui voluptatem id quidem quo.', email: deanna.borer@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 6, name: 'Qui ipsam laudantium voluptatibus iste ullam omnis.', email: malcolm10@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 7, name: 'Pariatur quae architecto quam dolorem.', email: lueilwitz.dorcas@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 8, name: 'Tempora porro qui repudiandae sed.', email: kuhlman.keara@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 9, name: 'Beatae nemo praesentium sunt blanditiis et rerum in.', email: magnolia.kuhic@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 10, name: 'Tempora voluptate eum tenetur nesciunt recusandae.', email: mollie92@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 11, name: 'Quo quia earum voluptatibus delectus sint aut eos nam.', email: shanelle80@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 12, name: 'Dignissimos tempore inventore perspiciatis autem voluptate provident magni.', email: rdach@example.org, role: superadmin, deleted_at: null, created_at: '2021-03-01T07:01:04.000000Z', updated_at: '2021-03-01T07:01:04.000000Z' }, { id: 13, name: 'Voluptatem et aliquid ab necessitatibus dolores perspiciatis voluptas.', email: mante.emelie@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 14, name: 'A minus dolores dolores.', email: sfarrell@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 15, name: 'Qui voluptas et veniam soluta ipsam dolor facere nihil.', email: lew95@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 16, name: 'Quia eum illum maxime.', email: lmueller@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 17, name: 'Delectus voluptatem cupiditate veritatis aut doloribus accusantium nihil.', email: marielle84@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 18, name: 'Est molestiae ut officia omnis reiciendis voluptatibus.', email: paul62@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 19, name: 'Et est ut veritatis qui.', email: yhermann@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 20, name: 'Ipsam sint voluptatem error similique.', email: cormier.jacquelyn@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 21, name: 'Quia magni et vel et quas aut.', email: rmurazik@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 22, name: 'Iusto harum quia autem.', email: sheldon.bauch@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 25, name: Faizal, email: faizal@suitmedia.com, role: editor, deleted_at: null, created_at: '2021-03-01T08:00:21.000000Z', updated_at: '2021-03-01T08:00:21.000000Z' }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/admins?page%5Bnumber%5D=1', last: 'http://localhost/api/admins?page%5Bnumber%5D=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/admins?page%5Bnumber%5D=1', label: '1', active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/admins', per_page: 30, to: 23, total: 23 } }
            tags:
                - 'Admin Management'
        post:
            summary: 'Create Resource.'
            description: 'Create a new admin resource.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Admin Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: odio
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: franecki.destin@example.org
                                password:
                                    type: string
                                    description: ''
                                    example: corporis
                                role:
                                    type: string
                                    description: 'The value must be one of <code>superadmin</code> or <code>editor</code>.'
                                    example: editor
                            required:
                                - name
                                - email
                                - password
                                - role
    '/api/admins/{admin}':
        get:
            summary: 'Show Resource.'
            description: 'Display a specific admin resource identified by the given id/key.'
            parameters:
                -
                    in: query
                    name: 'fields[admins]'
                    description: "*string* - \nComma-separated field/attribute names of the admin resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the admin resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `posts`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `posts`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, name: 'Ut quasi molestiae odit voluptas fuga est magnam.', email: uriah.west@example.org, role: superadmin, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 2, name: 'Et ea qui a cupiditate.', email: kiley15@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 3, name: 'Qui mollitia sit enim molestiae.', email: judson.wyman@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 4, name: 'Sunt enim vitae aut consequatur vel enim.', email: marks.caesar@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 5, name: 'In et quia qui voluptatem id quidem quo.', email: deanna.borer@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 6, name: 'Qui ipsam laudantium voluptatibus iste ullam omnis.', email: malcolm10@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 7, name: 'Pariatur quae architecto quam dolorem.', email: lueilwitz.dorcas@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 8, name: 'Tempora porro qui repudiandae sed.', email: kuhlman.keara@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 9, name: 'Beatae nemo praesentium sunt blanditiis et rerum in.', email: magnolia.kuhic@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 10, name: 'Tempora voluptate eum tenetur nesciunt recusandae.', email: mollie92@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 11, name: 'Quo quia earum voluptatibus delectus sint aut eos nam.', email: shanelle80@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 12, name: 'Dignissimos tempore inventore perspiciatis autem voluptate provident magni.', email: rdach@example.org, role: superadmin, deleted_at: null, created_at: '2021-03-01T07:01:04.000000Z', updated_at: '2021-03-01T07:01:04.000000Z' }, { id: 13, name: 'Voluptatem et aliquid ab necessitatibus dolores perspiciatis voluptas.', email: mante.emelie@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 14, name: 'A minus dolores dolores.', email: sfarrell@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 15, name: 'Qui voluptas et veniam soluta ipsam dolor facere nihil.', email: lew95@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 16, name: 'Quia eum illum maxime.', email: lmueller@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 17, name: 'Delectus voluptatem cupiditate veritatis aut doloribus accusantium nihil.', email: marielle84@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 18, name: 'Est molestiae ut officia omnis reiciendis voluptatibus.', email: paul62@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 19, name: 'Et est ut veritatis qui.', email: yhermann@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 20, name: 'Ipsam sint voluptatem error similique.', email: cormier.jacquelyn@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 21, name: 'Quia magni et vel et quas aut.', email: rmurazik@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 22, name: 'Iusto harum quia autem.', email: sheldon.bauch@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 25, name: Faizal, email: faizal@suitmedia.com, role: editor, deleted_at: null, created_at: '2021-03-01T08:00:21.000000Z', updated_at: '2021-03-01T08:00:21.000000Z' }]
                                    links: { first: 'http://localhost/api/admins?page%5Bnumber%5D=1', last: 'http://localhost/api/admins?page%5Bnumber%5D=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/admins?page%5Bnumber%5D=1', label: '1', active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/admins', per_page: 30, to: 23, total: 23 }
                                properties:
                                    data: { type: array, example: [{ id: 1, name: 'Ut quasi molestiae odit voluptas fuga est magnam.', email: uriah.west@example.org, role: superadmin, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 2, name: 'Et ea qui a cupiditate.', email: kiley15@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 3, name: 'Qui mollitia sit enim molestiae.', email: judson.wyman@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 4, name: 'Sunt enim vitae aut consequatur vel enim.', email: marks.caesar@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 5, name: 'In et quia qui voluptatem id quidem quo.', email: deanna.borer@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 6, name: 'Qui ipsam laudantium voluptatibus iste ullam omnis.', email: malcolm10@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 7, name: 'Pariatur quae architecto quam dolorem.', email: lueilwitz.dorcas@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 8, name: 'Tempora porro qui repudiandae sed.', email: kuhlman.keara@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 9, name: 'Beatae nemo praesentium sunt blanditiis et rerum in.', email: magnolia.kuhic@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 10, name: 'Tempora voluptate eum tenetur nesciunt recusandae.', email: mollie92@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 11, name: 'Quo quia earum voluptatibus delectus sint aut eos nam.', email: shanelle80@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:00:05.000000Z', updated_at: '2021-03-01T07:00:05.000000Z' }, { id: 12, name: 'Dignissimos tempore inventore perspiciatis autem voluptate provident magni.', email: rdach@example.org, role: superadmin, deleted_at: null, created_at: '2021-03-01T07:01:04.000000Z', updated_at: '2021-03-01T07:01:04.000000Z' }, { id: 13, name: 'Voluptatem et aliquid ab necessitatibus dolores perspiciatis voluptas.', email: mante.emelie@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 14, name: 'A minus dolores dolores.', email: sfarrell@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 15, name: 'Qui voluptas et veniam soluta ipsam dolor facere nihil.', email: lew95@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 16, name: 'Quia eum illum maxime.', email: lmueller@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 17, name: 'Delectus voluptatem cupiditate veritatis aut doloribus accusantium nihil.', email: marielle84@example.org, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 18, name: 'Est molestiae ut officia omnis reiciendis voluptatibus.', email: paul62@example.com, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 19, name: 'Et est ut veritatis qui.', email: yhermann@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 20, name: 'Ipsam sint voluptatem error similique.', email: cormier.jacquelyn@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 21, name: 'Quia magni et vel et quas aut.', email: rmurazik@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 22, name: 'Iusto harum quia autem.', email: sheldon.bauch@example.net, role: editor, deleted_at: null, created_at: '2021-03-01T07:01:05.000000Z', updated_at: '2021-03-01T07:01:05.000000Z' }, { id: 25, name: Faizal, email: faizal@suitmedia.com, role: editor, deleted_at: null, created_at: '2021-03-01T08:00:21.000000Z', updated_at: '2021-03-01T08:00:21.000000Z' }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/admins?page%5Bnumber%5D=1', last: 'http://localhost/api/admins?page%5Bnumber%5D=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/admins?page%5Bnumber%5D=1', label: '1', active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/admins', per_page: 30, to: 23, total: 23 } }
            tags:
                - 'Admin Management'
        put:
            summary: 'Update Resource.'
            description: 'Update a specific admin resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Admin Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: rerum
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: willy63@example.com
                                password:
                                    type: string
                                    description: ''
                                    example: reprehenderit
                                role:
                                    type: string
                                    description: 'The value must be one of <code>superadmin</code> or <code>editor</code>.'
                                    example: editor
                            required:
                                - name
                                - email
                                - password
                                - role
        delete:
            summary: 'Delete Resource.'
            description: 'Delete a specific admin resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Admin Management'
        parameters:
            -
                in: path
                name: admin
                description: "*integer* - \nThe identifier of a specific admin resource."
                example: null
                required: true
                schema:
                    type: string
    /api/comments:
        get:
            summary: 'Resource Collection.'
            description: 'Display a collection of the comment resources in paginated document format.'
            parameters:
                -
                    in: query
                    name: 'fields[comments]'
                    description: "*string* - \nComma-separated field/attribute names of the comment resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_id`, `user_id`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the comment resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_id`, `user_id`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'fields[post]'
                    description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'page[size]'
                    description: "*integer* - \nDescribe how many records to display in a collection."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*integer* - \nDescribe how many records to display in a collection."
                        example: null
                -
                    in: query
                    name: 'page[number]'
                    description: "*integer* - \nDescribe the number of current page to display."
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: "*integer* - \nDescribe the number of current page to display."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `post`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `post`."
                        example: null
                -
                    in: query
                    name: sort
                    description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `post_id`, `user_id`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `post_id`, `user_id`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'filter[`filterName`]'
                    description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `post_id`, `user_id`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`, `post.id`, `post.post_category_id`, `post.admin_id`, `post.title`, `post.description`, `post.content`, `post.published`, `post.deleted_at`, `post.created_at`, `post.updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `post_id`, `user_id`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`, `post.id`, `post.post_category_id`, `post.admin_id`, `post.title`, `post.description`, `post.content`, `post.published`, `post.deleted_at`, `post.created_at`, `post.updated_at`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                403:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'This action is unauthorized.'
                                properties:
                                    message: { type: string, example: 'This action is unauthorized.' }
            tags:
                - 'Comment Management'
        post:
            summary: 'Create Resource.'
            description: 'Create a new comment resource.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Comment Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                post_id:
                                    type: integer
                                    description: ''
                                    example: 12
                                user_id:
                                    type: integer
                                    description: ''
                                    example: 2
                                content:
                                    type: string
                                    description: ''
                                    example: deleniti
                                published:
                                    type: boolean
                                    description: ''
                                    example: false
                            required:
                                - post_id
                                - user_id
                                - content
                                - published
    '/api/comments/{comment}':
        get:
            summary: 'Show Resource.'
            description: 'Display a specific comment resource identified by the given id/key.'
            parameters:
                -
                    in: query
                    name: 'fields[comments]'
                    description: "*string* - \nComma-separated field/attribute names of the comment resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_id`, `user_id`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the comment resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_id`, `user_id`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'fields[post]'
                    description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `post`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `post`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                403:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'This action is unauthorized.'
                                properties:
                                    message: { type: string, example: 'This action is unauthorized.' }
            tags:
                - 'Comment Management'
        put:
            summary: 'Update Resource.'
            description: 'Update a specific comment resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Comment Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                post_id:
                                    type: integer
                                    description: ''
                                    example: 10
                                user_id:
                                    type: integer
                                    description: ''
                                    example: 15
                                content:
                                    type: string
                                    description: ''
                                    example: in
                                published:
                                    type: boolean
                                    description: ''
                                    example: false
                            required:
                                - post_id
                                - user_id
                                - content
                                - published
        delete:
            summary: 'Delete Resource.'
            description: 'Delete a specific comment resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Comment Management'
        parameters:
            -
                in: path
                name: comment
                description: "*integer* - \nThe identifier of a specific comment resource."
                example: null
                required: true
                schema:
                    type: string
    /sanctum/csrf-cookie:
        get:
            summary: 'Return an empty response simply to trigger the storage of the CSRF cookie in the browser.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /api/token:
        post:
            summary: 'Get Token.'
            description: 'Return a token for requesting protected resources.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: norval92@example.org
                                password:
                                    type: string
                                    description: ''
                                    example: ullam
                            required:
                                - email
                                - password
            security: []
    /:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n        <title>Laravel</title>\n\n        <!-- Fonts -->\n        <link href=\"https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n\n        <!-- Styles -->\n        <style>\n            /*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}a{background-color:transparent}[hidden]{display:none}html{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5}*,:after,:before{box-sizing:border-box;border:0 solid #e2e8f0}a{color:inherit;text-decoration:inherit}svg,video{display:block;vertical-align:middle}video{max-width:100%;height:auto}.bg-white{--bg-opacity:1;background-color:#fff;background-color:rgba(255,255,255,var(--bg-opacity))}.bg-gray-100{--bg-opacity:1;background-color:#f7fafc;background-color:rgba(247,250,252,var(--bg-opacity))}.border-gray-200{--border-opacity:1;border-color:#edf2f7;border-color:rgba(237,242,247,var(--border-opacity))}.border-t{border-top-width:1px}.flex{display:flex}.grid{display:grid}.hidden{display:none}.items-center{align-items:center}.justify-center{justify-content:center}.font-semibold{font-weight:600}.h-5{height:1.25rem}.h-8{height:2rem}.h-16{height:4rem}.text-sm{font-size:.875rem}.text-lg{font-size:1.125rem}.leading-7{line-height:1.75rem}.mx-auto{margin-left:auto;margin-right:auto}.ml-1{margin-left:.25rem}.mt-2{margin-top:.5rem}.mr-2{margin-right:.5rem}.ml-2{margin-left:.5rem}.mt-4{margin-top:1rem}.ml-4{margin-left:1rem}.mt-8{margin-top:2rem}.ml-12{margin-left:3rem}.-mt-px{margin-top:-1px}.max-w-6xl{max-width:72rem}.min-h-screen{min-height:100vh}.overflow-hidden{overflow:hidden}.p-6{padding:1.5rem}.py-4{padding-top:1rem;padding-bottom:1rem}.px-6{padding-left:1.5rem;padding-right:1.5rem}.pt-8{padding-top:2rem}.fixed{position:fixed}.relative{position:relative}.top-0{top:0}.right-0{right:0}.shadow{box-shadow:0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px 0 rgba(0,0,0,.06)}.text-center{text-align:center}.text-gray-200{--text-opacity:1;color:#edf2f7;color:rgba(237,242,247,var(--text-opacity))}.text-gray-300{--text-opacity:1;color:#e2e8f0;color:rgba(226,232,240,var(--text-opacity))}.text-gray-400{--text-opacity:1;color:#cbd5e0;color:rgba(203,213,224,var(--text-opacity))}.text-gray-500{--text-opacity:1;color:#a0aec0;color:rgba(160,174,192,var(--text-opacity))}.text-gray-600{--text-opacity:1;color:#718096;color:rgba(113,128,150,var(--text-opacity))}.text-gray-700{--text-opacity:1;color:#4a5568;color:rgba(74,85,104,var(--text-opacity))}.text-gray-900{--text-opacity:1;color:#1a202c;color:rgba(26,32,44,var(--text-opacity))}.underline{text-decoration:underline}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.w-5{width:1.25rem}.w-8{width:2rem}.w-auto{width:auto}.grid-cols-1{grid-template-columns:repeat(1,minmax(0,1fr))}@media (min-width:640px){.sm\\:rounded-lg{border-radius:.5rem}.sm\\:block{display:block}.sm\\:items-center{align-items:center}.sm\\:justify-start{justify-content:flex-start}.sm\\:justify-between{justify-content:space-between}.sm\\:h-20{height:5rem}.sm\\:ml-0{margin-left:0}.sm\\:px-6{padding-left:1.5rem;padding-right:1.5rem}.sm\\:pt-0{padding-top:0}.sm\\:text-left{text-align:left}.sm\\:text-right{text-align:right}}@media (min-width:768px){.md\\:border-t-0{border-top-width:0}.md\\:border-l{border-left-width:1px}.md\\:grid-cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}}@media (min-width:1024px){.lg\\:px-8{padding-left:2rem;padding-right:2rem}}@media (prefers-color-scheme:dark){.dark\\:bg-gray-800{--bg-opacity:1;background-color:#2d3748;background-color:rgba(45,55,72,var(--bg-opacity))}.dark\\:bg-gray-900{--bg-opacity:1;background-color:#1a202c;background-color:rgba(26,32,44,var(--bg-opacity))}.dark\\:border-gray-700{--border-opacity:1;border-color:#4a5568;border-color:rgba(74,85,104,var(--border-opacity))}.dark\\:text-white{--text-opacity:1;color:#fff;color:rgba(255,255,255,var(--text-opacity))}.dark\\:text-gray-400{--text-opacity:1;color:#cbd5e0;color:rgba(203,213,224,var(--text-opacity))}}\n        </style>\n\n        <style>\n            body {\n                font-family: 'Nunito';\n            }\n        </style>\n    </head>\n    <body class=\"antialiased\">\n        <div class=\"relative flex items-top justify-center min-h-screen bg-gray-100 dark:bg-gray-900 sm:items-center sm:pt-0\">\n            \n            <div class=\"max-w-6xl mx-auto sm:px-6 lg:px-8\">\n                <div class=\"flex justify-center pt-8 sm:justify-start sm:pt-0\">\n                    <svg viewBox=\"0 0 651 192\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-16 w-auto text-gray-700 sm:h-20\">\n                        <g clip-path=\"url(#clip0)\" fill=\"#EF3B2D\">\n                            <path d=\"M248.032 44.676h-16.466v100.23h47.394v-14.748h-30.928V44.676zM337.091 87.202c-2.101-3.341-5.083-5.965-8.949-7.875-3.865-1.909-7.756-2.864-11.669-2.864-5.062 0-9.69.931-13.89 2.792-4.201 1.861-7.804 4.417-10.811 7.661-3.007 3.246-5.347 6.993-7.016 11.239-1.672 4.249-2.506 8.713-2.506 13.389 0 4.774.834 9.26 2.506 13.459 1.669 4.202 4.009 7.925 7.016 11.169 3.007 3.246 6.609 5.799 10.811 7.66 4.199 1.861 8.828 2.792 13.89 2.792 3.913 0 7.804-.955 11.669-2.863 3.866-1.908 6.849-4.533 8.949-7.875v9.021h15.607V78.182h-15.607v9.02zm-1.431 32.503c-.955 2.578-2.291 4.821-4.009 6.73-1.719 1.91-3.795 3.437-6.229 4.582-2.435 1.146-5.133 1.718-8.091 1.718-2.96 0-5.633-.572-8.019-1.718-2.387-1.146-4.438-2.672-6.156-4.582-1.719-1.909-3.032-4.152-3.938-6.73-.909-2.577-1.36-5.298-1.36-8.161 0-2.864.451-5.585 1.36-8.162.905-2.577 2.219-4.819 3.938-6.729 1.718-1.908 3.77-3.437 6.156-4.582 2.386-1.146 5.059-1.718 8.019-1.718 2.958 0 5.656.572 8.091 1.718 2.434 1.146 4.51 2.674 6.229 4.582 1.718 1.91 3.054 4.152 4.009 6.729.953 2.577 1.432 5.298 1.432 8.162-.001 2.863-.479 5.584-1.432 8.161zM463.954 87.202c-2.101-3.341-5.083-5.965-8.949-7.875-3.865-1.909-7.756-2.864-11.669-2.864-5.062 0-9.69.931-13.89 2.792-4.201 1.861-7.804 4.417-10.811 7.661-3.007 3.246-5.347 6.993-7.016 11.239-1.672 4.249-2.506 8.713-2.506 13.389 0 4.774.834 9.26 2.506 13.459 1.669 4.202 4.009 7.925 7.016 11.169 3.007 3.246 6.609 5.799 10.811 7.66 4.199 1.861 8.828 2.792 13.89 2.792 3.913 0 7.804-.955 11.669-2.863 3.866-1.908 6.849-4.533 8.949-7.875v9.021h15.607V78.182h-15.607v9.02zm-1.432 32.503c-.955 2.578-2.291 4.821-4.009 6.73-1.719 1.91-3.795 3.437-6.229 4.582-2.435 1.146-5.133 1.718-8.091 1.718-2.96 0-5.633-.572-8.019-1.718-2.387-1.146-4.438-2.672-6.156-4.582-1.719-1.909-3.032-4.152-3.938-6.73-.909-2.577-1.36-5.298-1.36-8.161 0-2.864.451-5.585 1.36-8.162.905-2.577 2.219-4.819 3.938-6.729 1.718-1.908 3.77-3.437 6.156-4.582 2.386-1.146 5.059-1.718 8.019-1.718 2.958 0 5.656.572 8.091 1.718 2.434 1.146 4.51 2.674 6.229 4.582 1.718 1.91 3.054 4.152 4.009 6.729.953 2.577 1.432 5.298 1.432 8.162 0 2.863-.479 5.584-1.432 8.161zM650.772 44.676h-15.606v100.23h15.606V44.676zM365.013 144.906h15.607V93.538h26.776V78.182h-42.383v66.724zM542.133 78.182l-19.616 51.096-19.616-51.096h-15.808l25.617 66.724h19.614l25.617-66.724h-15.808zM591.98 76.466c-19.112 0-34.239 15.706-34.239 35.079 0 21.416 14.641 35.079 36.239 35.079 12.088 0 19.806-4.622 29.234-14.688l-10.544-8.158c-.006.008-7.958 10.449-19.832 10.449-13.802 0-19.612-11.127-19.612-16.884h51.777c2.72-22.043-11.772-40.877-33.023-40.877zm-18.713 29.28c.12-1.284 1.917-16.884 18.589-16.884 16.671 0 18.697 15.598 18.813 16.884h-37.402zM184.068 43.892c-.024-.088-.073-.165-.104-.25-.058-.157-.108-.316-.191-.46-.056-.097-.137-.176-.203-.265-.087-.117-.161-.242-.265-.345-.085-.086-.194-.148-.29-.223-.109-.085-.206-.182-.327-.252l-.002-.001-.002-.002-35.648-20.524a2.971 2.971 0 00-2.964 0l-35.647 20.522-.002.002-.002.001c-.121.07-.219.167-.327.252-.096.075-.205.138-.29.223-.103.103-.178.228-.265.345-.066.089-.147.169-.203.265-.083.144-.133.304-.191.46-.031.085-.08.162-.104.25-.067.249-.103.51-.103.776v38.979l-29.706 17.103V24.493a3 3 0 00-.103-.776c-.024-.088-.073-.165-.104-.25-.058-.157-.108-.316-.191-.46-.056-.097-.137-.176-.203-.265-.087-.117-.161-.242-.265-.345-.085-.086-.194-.148-.29-.223-.109-.085-.206-.182-.327-.252l-.002-.001-.002-.002L40.098 1.396a2.971 2.971 0 00-2.964 0L1.487 21.919l-.002.002-.002.001c-.121.07-.219.167-.327.252-.096.075-.205.138-.29.223-.103.103-.178.228-.265.345-.066.089-.147.169-.203.265-.083.144-.133.304-.191.46-.031.085-.08.162-.104.25-.067.249-.103.51-.103.776v122.09c0 1.063.568 2.044 1.489 2.575l71.293 41.045c.156.089.324.143.49.202.078.028.15.074.23.095a2.98 2.98 0 001.524 0c.069-.018.132-.059.2-.083.176-.061.354-.119.519-.214l71.293-41.045a2.971 2.971 0 001.489-2.575v-38.979l34.158-19.666a2.971 2.971 0 001.489-2.575V44.666a3.075 3.075 0 00-.106-.774zM74.255 143.167l-29.648-16.779 31.136-17.926.001-.001 34.164-19.669 29.674 17.084-21.772 12.428-43.555 24.863zm68.329-76.259v33.841l-12.475-7.182-17.231-9.92V49.806l12.475 7.182 17.231 9.92zm2.97-39.335l29.693 17.095-29.693 17.095-29.693-17.095 29.693-17.095zM54.06 114.089l-12.475 7.182V46.733l17.231-9.92 12.475-7.182v74.537l-17.231 9.921zM38.614 7.398l29.693 17.095-29.693 17.095L8.921 24.493 38.614 7.398zM5.938 29.632l12.475 7.182 17.231 9.92v79.676l.001.005-.001.006c0 .114.032.221.045.333.017.146.021.294.059.434l.002.007c.032.117.094.222.14.334.051.124.088.255.156.371a.036.036 0 00.004.009c.061.105.149.191.222.288.081.105.149.22.244.314l.008.01c.084.083.19.142.284.215.106.083.202.178.32.247l.013.005.011.008 34.139 19.321v34.175L5.939 144.867V29.632h-.001zm136.646 115.235l-65.352 37.625V148.31l48.399-27.628 16.953-9.677v33.862zm35.646-61.22l-29.706 17.102V66.908l17.231-9.92 12.475-7.182v33.841z\"/>\n                        </g>\n                    </svg>\n                </div>\n\n                <div class=\"mt-8 bg-white dark:bg-gray-800 overflow-hidden shadow sm:rounded-lg\">\n                    <div class=\"grid grid-cols-1 md:grid-cols-2\">\n                        <div class=\"p-6\">\n                            <div class=\"flex items-center\">\n                                <svg fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" class=\"w-8 h-8 text-gray-500\"><path d=\"M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253\"></path></svg>\n                                <div class=\"ml-4 text-lg leading-7 font-semibold\"><a href=\"https://laravel.com/docs\" class=\"underline text-gray-900 dark:text-white\">Documentation</a></div>\n                            </div>\n\n                            <div class=\"ml-12\">\n                                <div class=\"mt-2 text-gray-600 dark:text-gray-400 text-sm\">\n                                    Laravel has wonderful, thorough documentation covering every aspect of the framework. Whether you are new to the framework or have previous experience with Laravel, we recommend reading all of the documentation from beginning to end.\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"p-6 border-t border-gray-200 dark:border-gray-700 md:border-t-0 md:border-l\">\n                            <div class=\"flex items-center\">\n                                <svg fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" class=\"w-8 h-8 text-gray-500\"><path d=\"M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z\"></path><path d=\"M15 13a3 3 0 11-6 0 3 3 0 016 0z\"></path></svg>\n                                <div class=\"ml-4 text-lg leading-7 font-semibold\"><a href=\"https://laracasts.com\" class=\"underline text-gray-900 dark:text-white\">Laracasts</a></div>\n                            </div>\n\n                            <div class=\"ml-12\">\n                                <div class=\"mt-2 text-gray-600 dark:text-gray-400 text-sm\">\n                                    Laracasts offers thousands of video tutorials on Laravel, PHP, and JavaScript development. Check them out, see for yourself, and massively level up your development skills in the process.\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"p-6 border-t border-gray-200 dark:border-gray-700\">\n                            <div class=\"flex items-center\">\n                                <svg fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" class=\"w-8 h-8 text-gray-500\"><path d=\"M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z\"></path></svg>\n                                <div class=\"ml-4 text-lg leading-7 font-semibold\"><a href=\"https://laravel-news.com/\" class=\"underline text-gray-900 dark:text-white\">Laravel News</a></div>\n                            </div>\n\n                            <div class=\"ml-12\">\n                                <div class=\"mt-2 text-gray-600 dark:text-gray-400 text-sm\">\n                                    Laravel News is a community driven portal and newsletter aggregating all of the latest and most important news in the Laravel ecosystem, including new package releases and tutorials.\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"p-6 border-t border-gray-200 dark:border-gray-700 md:border-l\">\n                            <div class=\"flex items-center\">\n                                <svg fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" class=\"w-8 h-8 text-gray-500\"><path d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg>\n                                <div class=\"ml-4 text-lg leading-7 font-semibold text-gray-900 dark:text-white\">Vibrant Ecosystem</div>\n                            </div>\n\n                            <div class=\"ml-12\">\n                                <div class=\"mt-2 text-gray-600 dark:text-gray-400 text-sm\">\n                                    Laravel's robust library of first-party tools and libraries, such as <a href=\"https://forge.laravel.com\" class=\"underline\">Forge</a>, <a href=\"https://vapor.laravel.com\" class=\"underline\">Vapor</a>, <a href=\"https://nova.laravel.com\" class=\"underline\">Nova</a>, and <a href=\"https://envoyer.io\" class=\"underline\">Envoyer</a> help you take your projects to the next level. Pair them with powerful open source libraries like <a href=\"https://laravel.com/docs/billing\" class=\"underline\">Cashier</a>, <a href=\"https://laravel.com/docs/dusk\" class=\"underline\">Dusk</a>, <a href=\"https://laravel.com/docs/broadcasting\" class=\"underline\">Echo</a>, <a href=\"https://laravel.com/docs/horizon\" class=\"underline\">Horizon</a>, <a href=\"https://laravel.com/docs/sanctum\" class=\"underline\">Sanctum</a>, <a href=\"https://laravel.com/docs/telescope\" class=\"underline\">Telescope</a>, and more.\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"flex justify-center mt-4 sm:items-center sm:justify-between\">\n                    <div class=\"text-center text-sm text-gray-500 sm:text-left\">\n                        <div class=\"flex items-center\">\n                            <svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" class=\"-mt-px w-5 h-5 text-gray-400\">\n                                <path d=\"M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z\"></path>\n                            </svg>\n\n                            <a href=\"https://laravel.bigcartel.com\" class=\"ml-1 underline\">\n                                Shop\n                            </a>\n\n                            <svg fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewBox=\"0 0 24 24\" class=\"ml-4 -mt-px w-5 h-5 text-gray-400\">\n                                <path d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"></path>\n                            </svg>\n\n                            <a href=\"https://github.com/sponsors/taylorotwell\" class=\"ml-1 underline\">\n                                Sponsor\n                            </a>\n                        </div>\n                    </div>\n\n                    <div class=\"ml-4 text-center text-sm text-gray-500 sm:text-right sm:ml-0\">\n                        Laravel v8.29.0 (PHP v7.4.10)\n                    </div>\n                </div>\n            </div>\n        </div>\n    </body>\n</html>\n"
            tags:
                - Endpoints
            security: []
    /api/post_categories:
        get:
            summary: 'Resource Collection.'
            description: 'Display a collection of the post category resources in paginated document format.'
            parameters:
                -
                    in: query
                    name: 'fields[post_categories]'
                    description: "*string* - \nComma-separated field/attribute names of the post_category resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post_category resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'page[size]'
                    description: "*integer* - \nDescribe how many records to display in a collection."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*integer* - \nDescribe how many records to display in a collection."
                        example: null
                -
                    in: query
                    name: 'page[number]'
                    description: "*integer* - \nDescribe the number of current page to display."
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: "*integer* - \nDescribe the number of current page to display."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `posts`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `posts`."
                        example: null
                -
                    in: query
                    name: sort
                    description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'filter[`filterName`]'
                    description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                403:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'This action is unauthorized.'
                                properties:
                                    message: { type: string, example: 'This action is unauthorized.' }
            tags:
                - 'Post Category Management'
        post:
            summary: 'Create Resource.'
            description: 'Create a new post category resource.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Post Category Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: sequi
                            required:
                                - name
    '/api/post_categories/{post_category}':
        get:
            summary: 'Show Resource.'
            description: 'Display a specific post category resource identified by the given id/key.'
            parameters:
                -
                    in: query
                    name: 'fields[post_categories]'
                    description: "*string* - \nComma-separated field/attribute names of the post_category resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post_category resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `posts`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `posts`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'No query results for model [App\Models\PostCategory] eum'
                                properties:
                                    message: { type: string, example: 'No query results for model [App\Models\PostCategory] eum' }
            tags:
                - 'Post Category Management'
        put:
            summary: 'Update Resource.'
            description: 'Update a specific post category resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Post Category Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: et
                            required:
                                - name
        delete:
            summary: 'Delete Resource.'
            description: 'Delete a specific post category resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Post Category Management'
        parameters:
            -
                in: path
                name: post_category
                description: ''
                example: eum
                required: true
                schema:
                    type: string
            -
                in: path
                name: postCategory
                description: "*integer* - \nThe identifier of a specific post category resource."
                example: null
                required: true
                schema:
                    type: string
    /api/posts:
        get:
            summary: 'Resource Collection.'
            description: 'Display a collection of the post resources in paginated document format.'
            parameters:
                -
                    in: query
                    name: 'fields[posts]'
                    description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'fields[postCategory]'
                    description: "*string* - \nComma-separated field/attribute names of the post_category resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post_category resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'fields[admin]'
                    description: "*string* - \nComma-separated field/attribute names of the admin resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the admin resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'page[size]'
                    description: "*integer* - \nDescribe how many records to display in a collection."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*integer* - \nDescribe how many records to display in a collection."
                        example: null
                -
                    in: query
                    name: 'page[number]'
                    description: "*integer* - \nDescribe the number of current page to display."
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: "*integer* - \nDescribe the number of current page to display."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `postCategory`, `admin`, `comments`, `postTags`, `tags`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `postCategory`, `admin`, `comments`, `postTags`, `tags`."
                        example: null
                -
                    in: query
                    name: sort
                    description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'filter[`filterName`]'
                    description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`, `postCategory.id`, `postCategory.name`, `postCategory.deleted_at`, `postCategory.created_at`, `postCategory.updated_at`, `admin.id`, `admin.name`, `admin.email`, `admin.password`, `admin.deleted_at`, `admin.created_at`, `admin.updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`, `postCategory.id`, `postCategory.name`, `postCategory.deleted_at`, `postCategory.created_at`, `postCategory.updated_at`, `admin.id`, `admin.name`, `admin.email`, `admin.password`, `admin.deleted_at`, `admin.created_at`, `admin.updated_at`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                403:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'This action is unauthorized.'
                                properties:
                                    message: { type: string, example: 'This action is unauthorized.' }
            tags:
                - 'Post Management'
        post:
            summary: 'Create Resource.'
            description: 'Create a new post resource.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Post Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                post_category_id:
                                    type: integer
                                    description: ''
                                    example: 5
                                title:
                                    type: string
                                    description: ''
                                    example: et
                                description:
                                    type: string
                                    description: ''
                                    example: illo
                                content:
                                    type: string
                                    description: ''
                                    example: ut
                                published:
                                    type: boolean
                                    description: ''
                                    example: false
                            required:
                                - post_category_id
                                - title
                                - description
                                - content
                                - published
    '/api/posts/{post}':
        get:
            summary: 'Show Resource.'
            description: 'Display a specific post resource identified by the given id/key.'
            parameters:
                -
                    in: query
                    name: 'fields[posts]'
                    description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'fields[postCategory]'
                    description: "*string* - \nComma-separated field/attribute names of the post_category resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post_category resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'fields[admin]'
                    description: "*string* - \nComma-separated field/attribute names of the admin resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the admin resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `email`, `password`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `postCategory`, `admin`, `comments`, `postTags`, `tags`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `postCategory`, `admin`, `comments`, `postTags`, `tags`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                403:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'This action is unauthorized.'
                                properties:
                                    message: { type: string, example: 'This action is unauthorized.' }
            tags:
                - 'Post Management'
        put:
            summary: 'Update Resource.'
            description: 'Update a specific post resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Post Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                post_category_id:
                                    type: integer
                                    description: ''
                                    example: 13
                                title:
                                    type: string
                                    description: ''
                                    example: explicabo
                                description:
                                    type: string
                                    description: ''
                                    example: ipsam
                                content:
                                    type: string
                                    description: ''
                                    example: omnis
                                published:
                                    type: boolean
                                    description: ''
                                    example: false
                            required:
                                - post_category_id
                                - title
                                - description
                                - content
                                - published
        delete:
            summary: 'Delete Resource.'
            description: 'Delete a specific post resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Post Management'
        parameters:
            -
                in: path
                name: post
                description: "*integer* - \nThe identifier of a specific post resource."
                example: null
                required: true
                schema:
                    type: string
    /api/post_tags:
        get:
            summary: 'Resource Collection.'
            description: 'Display a collection of the post tag resources in paginated document format.'
            parameters:
                -
                    in: query
                    name: 'fields[post_tags]'
                    description: "*string* - \nComma-separated field/attribute names of the post_tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_id`, `tag_id`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post_tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_id`, `tag_id`."
                        example: null
                -
                    in: query
                    name: 'fields[post]'
                    description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'fields[tag]'
                    description: "*string* - \nComma-separated field/attribute names of the tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'page[size]'
                    description: "*integer* - \nDescribe how many records to display in a collection."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*integer* - \nDescribe how many records to display in a collection."
                        example: null
                -
                    in: query
                    name: 'page[number]'
                    description: "*integer* - \nDescribe the number of current page to display."
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: "*integer* - \nDescribe the number of current page to display."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `post`, `tag`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `post`, `tag`."
                        example: null
                -
                    in: query
                    name: sort
                    description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `post_id`, `tag_id`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `post_id`, `tag_id`."
                        example: null
                -
                    in: query
                    name: 'filter[`filterName`]'
                    description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `post_id`, `tag_id`, `post.id`, `post.post_category_id`, `post.admin_id`, `post.title`, `post.description`, `post.content`, `post.published`, `post.deleted_at`, `post.created_at`, `post.updated_at`, `tag.id`, `tag.name`, `tag.deleted_at`, `tag.created_at`, `tag.updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `post_id`, `tag_id`, `post.id`, `post.post_category_id`, `post.admin_id`, `post.title`, `post.description`, `post.content`, `post.published`, `post.deleted_at`, `post.created_at`, `post.updated_at`, `tag.id`, `tag.name`, `tag.deleted_at`, `tag.created_at`, `tag.updated_at`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                403:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'This action is unauthorized.'
                                properties:
                                    message: { type: string, example: 'This action is unauthorized.' }
            tags:
                - 'Post Tag Management'
        post:
            summary: 'Create Resource.'
            description: 'Create a new post tag resource.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Post Tag Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                post_id:
                                    type: integer
                                    description: ''
                                    example: 11
                                tag_id:
                                    type: integer
                                    description: ''
                                    example: 7
                            required:
                                - post_id
                                - tag_id
    '/api/post_tags/{post_tag}':
        get:
            summary: 'Show Resource.'
            description: 'Display a specific post tag resource identified by the given id/key.'
            parameters:
                -
                    in: query
                    name: 'fields[post_tags]'
                    description: "*string* - \nComma-separated field/attribute names of the post_tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_id`, `tag_id`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post_tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_id`, `tag_id`."
                        example: null
                -
                    in: query
                    name: 'fields[post]'
                    description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the post resource to include in the response document.\nThe available fields for current endpoint are: `id`, `post_category_id`, `admin_id`, `title`, `description`, `content`, `published`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'fields[tag]'
                    description: "*string* - \nComma-separated field/attribute names of the tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `post`, `tag`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `post`, `tag`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'No query results for model [App\Models\PostTag] non'
                                properties:
                                    message: { type: string, example: 'No query results for model [App\Models\PostTag] non' }
            tags:
                - 'Post Tag Management'
        put:
            summary: 'Update Resource.'
            description: 'Update a specific post tag resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Post Tag Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                post_id:
                                    type: integer
                                    description: ''
                                    example: 4
                                tag_id:
                                    type: integer
                                    description: ''
                                    example: 18
                            required:
                                - post_id
                                - tag_id
        delete:
            summary: 'Delete Resource.'
            description: 'Delete a specific post tag resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Post Tag Management'
        parameters:
            -
                in: path
                name: post_tag
                description: ''
                example: non
                required: true
                schema:
                    type: string
            -
                in: path
                name: postTag
                description: "*integer* - \nThe identifier of a specific post tag resource."
                example: null
                required: true
                schema:
                    type: string
    /api/tags:
        get:
            summary: 'Resource Collection.'
            description: 'Display a collection of the tag resources in paginated document format.'
            parameters:
                -
                    in: query
                    name: 'fields[tags]'
                    description: "*string* - \nComma-separated field/attribute names of the tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'page[size]'
                    description: "*integer* - \nDescribe how many records to display in a collection."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*integer* - \nDescribe how many records to display in a collection."
                        example: null
                -
                    in: query
                    name: 'page[number]'
                    description: "*integer* - \nDescribe the number of current page to display."
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: "*integer* - \nDescribe the number of current page to display."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `postTags`, `posts`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `postTags`, `posts`."
                        example: null
                -
                    in: query
                    name: sort
                    description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nField/attribute to sort the resources in response document by.\nThe available fields for sorting operation in current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: 'filter[`filterName`]'
                    description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nFilter the resources by specifying *attribute name* or *query scope name*.\nThe available filters for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                403:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'This action is unauthorized.'
                                properties:
                                    message: { type: string, example: 'This action is unauthorized.' }
            tags:
                - 'Tag Management'
        post:
            summary: 'Create Resource.'
            description: 'Create a new tag resource.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tag Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: aut
                            required:
                                - name
    '/api/tags/{tag}':
        get:
            summary: 'Show Resource.'
            description: 'Display a specific tag resource identified by the given id/key.'
            parameters:
                -
                    in: query
                    name: 'fields[tags]'
                    description: "*string* - \nComma-separated field/attribute names of the tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated field/attribute names of the tag resource to include in the response document.\nThe available fields for current endpoint are: `id`, `name`, `deleted_at`, `created_at`, `updated_at`."
                        example: null
                -
                    in: query
                    name: include
                    description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `postTags`, `posts`."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "*string* - \nComma-separated relationship names to include in the response document.\nThe available relationships for current endpoint are: `postTags`, `posts`."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                403:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'This action is unauthorized.'
                                properties:
                                    message: { type: string, example: 'This action is unauthorized.' }
            tags:
                - 'Tag Management'
        put:
            summary: 'Update Resource.'
            description: 'Update a specific tag resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tag Management'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: ipsum
                            required:
                                - name
        delete:
            summary: 'Delete Resource.'
            description: 'Delete a specific tag resource identified by the given id/key.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Tag Management'
        parameters:
            -
                in: path
                name: tag
                description: "*integer* - \nThe identifier of a specific tag resource."
                example: null
                required: true
                schema:
                    type: string
components:
    securitySchemes:
        default:
            type: http
            scheme: bearer
            description: ''
security:
    -
        default: []
